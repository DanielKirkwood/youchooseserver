// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielKirkwood/youchooseserver/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Otp applies equality check predicate on the "otp" field. It's identical to OtpEQ.
func Otp(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOtp, v))
}

// OtpExpiresAt applies equality check predicate on the "otp_expires_at" field. It's identical to OtpExpiresAtEQ.
func OtpExpiresAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOtpExpiresAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// OtpEQ applies the EQ predicate on the "otp" field.
func OtpEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOtp, v))
}

// OtpNEQ applies the NEQ predicate on the "otp" field.
func OtpNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOtp, v))
}

// OtpIn applies the In predicate on the "otp" field.
func OtpIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOtp, vs...))
}

// OtpNotIn applies the NotIn predicate on the "otp" field.
func OtpNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOtp, vs...))
}

// OtpGT applies the GT predicate on the "otp" field.
func OtpGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOtp, v))
}

// OtpGTE applies the GTE predicate on the "otp" field.
func OtpGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOtp, v))
}

// OtpLT applies the LT predicate on the "otp" field.
func OtpLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOtp, v))
}

// OtpLTE applies the LTE predicate on the "otp" field.
func OtpLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOtp, v))
}

// OtpContains applies the Contains predicate on the "otp" field.
func OtpContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOtp, v))
}

// OtpHasPrefix applies the HasPrefix predicate on the "otp" field.
func OtpHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOtp, v))
}

// OtpHasSuffix applies the HasSuffix predicate on the "otp" field.
func OtpHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOtp, v))
}

// OtpIsNil applies the IsNil predicate on the "otp" field.
func OtpIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOtp))
}

// OtpNotNil applies the NotNil predicate on the "otp" field.
func OtpNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOtp))
}

// OtpEqualFold applies the EqualFold predicate on the "otp" field.
func OtpEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOtp, v))
}

// OtpContainsFold applies the ContainsFold predicate on the "otp" field.
func OtpContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOtp, v))
}

// OtpExpiresAtEQ applies the EQ predicate on the "otp_expires_at" field.
func OtpExpiresAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOtpExpiresAt, v))
}

// OtpExpiresAtNEQ applies the NEQ predicate on the "otp_expires_at" field.
func OtpExpiresAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOtpExpiresAt, v))
}

// OtpExpiresAtIn applies the In predicate on the "otp_expires_at" field.
func OtpExpiresAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldOtpExpiresAt, vs...))
}

// OtpExpiresAtNotIn applies the NotIn predicate on the "otp_expires_at" field.
func OtpExpiresAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOtpExpiresAt, vs...))
}

// OtpExpiresAtGT applies the GT predicate on the "otp_expires_at" field.
func OtpExpiresAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldOtpExpiresAt, v))
}

// OtpExpiresAtGTE applies the GTE predicate on the "otp_expires_at" field.
func OtpExpiresAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOtpExpiresAt, v))
}

// OtpExpiresAtLT applies the LT predicate on the "otp_expires_at" field.
func OtpExpiresAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldOtpExpiresAt, v))
}

// OtpExpiresAtLTE applies the LTE predicate on the "otp_expires_at" field.
func OtpExpiresAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOtpExpiresAt, v))
}

// OtpExpiresAtIsNil applies the IsNil predicate on the "otp_expires_at" field.
func OtpExpiresAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOtpExpiresAt))
}

// OtpExpiresAtNotNil applies the NotNil predicate on the "otp_expires_at" field.
func OtpExpiresAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOtpExpiresAt))
}

// HasFriends applies the HasEdge predicate on the "friends" edge.
func HasFriends() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FriendsTable, FriendsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFriendsWith applies the HasEdge predicate on the "friends" edge with a given conditions (other predicates).
func HasFriendsWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFriendsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFriendships applies the HasEdge predicate on the "friendships" edge.
func HasFriendships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FriendshipsTable, FriendshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFriendshipsWith applies the HasEdge predicate on the "friendships" edge with a given conditions (other predicates).
func HasFriendshipsWith(preds ...predicate.Friendship) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFriendshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
